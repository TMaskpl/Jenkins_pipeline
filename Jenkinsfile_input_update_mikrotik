def FAILED_STAGE;
def mt;
def ver;

pipeline {

    agent any

    parameters {
        choice choices: [ "stable", "long-term", "testing"], description: 'Wybierz wersje mikrotika', name: 'ver'
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '3'))
    }

    stages {
        stage('Cleaning... ') {
            steps {
                cleanWs()
            }
        }

        stage('Git clone...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Clone repository...'
                    git branch: 'main', credentialsId: 'pro_gitlab_secret', url: 'https://gitlab.com/dniemczok/ansible-mikrotik.git'
                }
            }
        }

        stage('Pliki inventory ansible') {
            steps {
                script {
                    sh '''
                    echo ${WORKSPACE}
                    cat /var/jenkins_home/inventory/mikrotikhost
                    '''
                }
            }
        }

        stage('Check mikrotik version ...') {
            input {
                message 'Wprowadz nazwę mikrotika z inventory'
                parameters {
                    string 'mikrotik'
                }
            }
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Check mikrotik version...'
                    mt = "${mikrotik}"
                    echo "${mt}"
                    echo "${ver}"
                    ansiblePlaybook installation: 'Ansible', extras: '-e mt_id=${mikrotik}', playbook: 'mikrotik_check_version.yml'
                    // sleep 15
                }
            }
        }

        stage('Update mikrotik ${ver}...') {
            // input {
            //     message 'Wprowadz nazwę mikrotika z inventory'
            //     parameters {
            //         string 'mikrotik'
            //     }
            // }
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Update mikrotik ${ver}...'
                    echo "${ver}"
                    echo "${mt}"
                    ansiblePlaybook installation: 'Ansible', extras: '-e mt_id="${mt}" -e ver=${ver}', playbook: 'mikrotik_update.yml'
                    // exit 0
                }
            }
        }
    }


    post {
        failure {
            echo "Failed stage name: ${FAILED_STAGE}"
            slackSend (color: '#FF0000', channel: 'tmaskpl', message: """FAILED_STAGE: Job "${env.STAGE_NAME} ${env.JOB_NAME} [${env.BUILD_NUMBER}]" (${env.BUILD_URL})""")
        }
    }
}
