def FAILED_STAGE

pipeline {
    agent any

    parameters {
        string defaultValue: 'tmask-psql15', description: 'Nazwa hosta z Postgresql', name: 'host'
        booleanParam defaultValue: false, description: 'Tworzenie bazy danej', name: 'create_db'
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '3'))
    }
    stages {
        stage('Cleaning... ') {
            steps {
                cleanWs()
            }
        }

        stage('Git clone...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Clone repository...'
                    git branch: 'main', credentialsId: 'pro_gitlab_secret', url: 'https://gitlab.com/dniemczok/ansible-postgres.git'
                }
            }
        }

        stage('Create db in postgres...') {
            when {
                expression { 
                    return params.create_db
                }
            }
            input {
                message 'Nazwa bazy danych'
                parameters {
                    string 'db'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'sudo_pass', variable: 'tmask')]) {
                    script {
                        FAILED_STAGE=env.STAGE_NAME
                        echo "${db}"
                        echo "${host}"
                        ansiblePlaybook installation: 'Ansible', extras: "-e h=${host} -e d=${db} -e sudo_pass=${tmask}", playbook: 'pg-create-db.yml'
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "Failed stage name: ${FAILED_STAGE}"
            slackSend (color: '#FF0000', channel: 'tmaskpl', message: """FAILED_STAGE: Job "${env.STAGE_NAME} ${env.JOB_NAME} [${env.BUILD_NUMBER}]" (${env.BUILD_URL})""")
        }
    }
}
