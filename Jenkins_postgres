def FAILED_STAGE

pipeline {
    agent any

    parameters {
        // choice choices: ['tmask-pro', 'tc01-pve', 'tc02-pve', 'tc03-pve', 'tc04-pve', 'intech-pve', 'krispol-pve', 'kppve01', 'kppve02'], description: 'Wybierz nazwę hosta Proxmox', name: 'host_vm'
        // string defaultValue: '500', description: 'Podaj id vm', name: 'vm_id'
        // string defaultValue: 'win-host', description: 'Podaj nazwe hosta Windows jeśli chcesz wykonać Update', name: 'win_vm'
        booleanParam defaultValue: false, description: 'Tworzenie bazy danej', name: 'create_db'
        // booleanParam defaultValue: true, description: 'Tworzenie snapshot', name: 'create_snap'
        // booleanParam defaultValue: false, description: 'Czy skasować snap po aktualizacji', name: 'remove_snap'
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '3'))
    }
    stages {
        stage('Cleaning... ') {
            steps {
                cleanWs()
            }
        }

        stage('Git clone...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Clone repository...'
                    git branch: 'main', credentialsId: 'pro_gitlab_secret', url: 'https://gitlab.com/dniemczok/ansible-postgres.git'
                }
            }
        }

        stage('Create db in postgres...') {
            when {
                expression { 
                    return params.create_db
                }
            }
            input {
                message 'Nazwa bazy danych'
                parameters {
                    string 'db'
                }
            }
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    ansiblePlaybook installation: 'Ansible', extras: "-e host=${host} -e db=${db}", playbook: 'pg-create-db.yml'
                }
            }
        }


    post {
        failure {
            echo "Failed stage name: ${FAILED_STAGE}"
            slackSend (color: '#FF0000', channel: 'tmaskpl', message: """FAILED_STAGE: Job "${env.STAGE_NAME} ${env.JOB_NAME} [${env.BUILD_NUMBER}]" (${env.BUILD_URL})""")
        }
    }
}
