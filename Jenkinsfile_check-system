def FAILED_STAGE

pipeline {

    agent any

    parameters {
        choice choices: ['tmask-pro', 'tc01-pve', 'tc02-pve', 'tc03-pve', 'tc04-pve', 'intech-pve', 'krispol-pve', 'kppve01', 'kppve02'], description: 'Wybierz nazwę hosta Proxmox', name: 'host_vm'
        string defaultValue: '500', description: 'Podaj id vm', name: 'vm_id'
        string defaultValue: 'win-host', description: 'Podaj nazwe hosta Windows jeśli chcesz wykonać Update', name: 'win_vm'
        booleanParam defaultValue: false, description: 'Aktualizacja Windows', name: 'run_update'
        booleanParam defaultValue: true, description: 'Tworzenie snapshot', name: 'create_snap'
        booleanParam defaultValue: false, description: 'Czy skasować snap po aktualizacji', name: 'remove_snap'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '3'))
        ansiColor('xterm')
    }

    stages {
        stage('Cleaning... ') {
            steps {
                cleanWs()
            }
        }

        stage('Git clone...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Clone repository...'
                    git branch: 'main', url: 'https://github.com/TMaskpl/Pipline-update-windows-on-PVE.git'
                }
            }
        }

        stage('Check system...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Check system...'
                    ansiblePlaybook installation: 'Ansible', extras: '-e host_vm=${host_vm}', playbook: 'check-system.yml', tags: 'check'            
                }
            }        
        }

        stage('Create snapshot...') {
            when {
                expression { 
                    return params.create_snap
                }
            }
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Create snapshot...'
                    build job: 'DEV_create_snapshot_proxmox_vm', parameters: [
                        string(name: 'host_vm', value: "${host_vm}"),
                        string(name: 'vm_id', value: "${vm_id}")
                    ]
                }
            }
        }

        stage('Update Windows ...') {
            when {
                expression { 
                    return params.run_update
                }
            }
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Update Windows...'
                    build job: 'DEV_windows_update', parameters: [
                        string(name: 'win_vm', value: "${win_vm}")
                    ]
                }
            }
        }
    }


    post {
        failure {
            echo "Failed stage name: ${FAILED_STAGE}"
            slackSend (color: '#FF0000', channel: 'tmaskpl', message: """FAILED_STAGE: Job "${env.STAGE_NAME} ${env.JOB_NAME} [${env.BUILD_NUMBER}]" (${env.BUILD_URL})""")
        }
    }
}
