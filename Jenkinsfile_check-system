def FAILED_STAGE

pipeline {
    agent any
    parameters {
        // string defaultValue: 'pve-host', description: 'Podaj nazwe hosta PVE', name: 'host_vm'
        choice(
        name: 'host_vm',
        choices: 'tmask-pro\ntc01-pve\ntc02-pve\ntc03-pve\ntc04-pve\nintech-pve\nkrispol-pve\nkppve01\nkppve02',
        description: 'Podaj nazwe hosta PVE'
        )
        string defaultValue: '666', description: 'Podaj id vm', name: 'vm_id'
        string defaultValue: 'win-host', description: 'Podaj nazwe hosta Windows', name: 'win_vm'
        booleanParam defaultValue: true, description: 'Aktualizacja Windows', name: 'run_update'
        booleanParam defaultValue: true, description: 'Tworzenie snapshot', name: 'create_snap'
        booleanParam defaultValue: false, description: 'Czy skasowaÄ‡ snap po aktualizacji', name: 'remove_snap'
    }
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Cleaning... ') {
            steps {
                cleanWs()
            }
        }

        stage('Git clone...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Clone repository...'
                    git branch: 'main', url: 'https://github.com/TMaskpl/Pipline-update-windows-on-PVE.git'
                }
            }
        }

        stage('Check system...') {
            steps {
                script {
                    FAILED_STAGE=env.STAGE_NAME
                    echo 'Check system...'
                    ansiblePlaybook installation: 'Ansible', extras: '-e host_vm=${host_vm}', playbook: 'check-system.yml', tags: 'check'            
                }
            }        
        }
    }
    post {
        failure {
            echo "Failed stage name: ${FAILED_STAGE}"
            slackSend (color: '#FF0000', channel: 'tmaskpl', message: """FAILED_STAGE: Job "${env.STAGE_NAME} ${env.JOB_NAME} [${env.BUILD_NUMBER}]" (${env.BUILD_URL})""")
        }
    }
}
